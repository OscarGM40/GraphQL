						GRAPHQL BY ANARTZ


El curso estará dividido en 4 secciones:

1- Introducción: primeros pasos,instalaciones y configuraciones
2- Teoría
3- Teoría+Práctica
4- Práctica 

El schema es el punto más importante de una API con GRAPHQL.
Dado que GRAPHQL sufrió grandes cambios en la versión 15 se recomienda usar la que usó él(npm install graphql@14.6.0)

						QUE ES GRAPHQL

GraphQl es un lenguaje de consulta a una API.
No es una libreria o framework.
Fue desarrollado por Facebook en 2012 y publicado en 2015.

Destaca por su eficiencia( se puede pedir lo que se desee y no retornará más datos que los que se piden) <- fijate que en móvil esto es muy importante.
En REST es muy común devolver datos de más y luego filtrar.

También destaca por su sistema de tipos(Type System),el cual describe la forma en la que se enviarán/recibirán los datos.Agrega seguridad adicional y validación en el lado del servidor,con mensajes personalizados.

Siempre trabajaremos sobre /graphql,es decir sobre un único endpoint.

Por último GraphQl trabaja con cualquier cosa: MySQL, MOngoDB,sobre cualquier lenguaje,... y también se puede construir sobre otra API,por encima de ella.
	
						GRAPHQL VS REST

NOTA:una petición REST usa HTTP y por ello es almacenada en caché.Sucesivas peticiones serán rescatadas de esa cache(301).
REST no esta autodocumentado.GraphQl si.REST produce underfetching u overfetching,con GraphQl puedo elegir que recibir en el JSON
Recuerda que en GraphQl no se cachea la respuesta y es responsabilidad del frontender cachear las respuestas(se suele usar apollo-client para cachear)

			SECCION 03 EL SCHEMA Y TYPE SYSTEM EN GRAPHQL

El schema es el centro de cualquier implementación del servidor de GraphQl.Siempre es el primer paso.Sin él no se puede construir la API.
Es la parte más compleja.Es un contrato entre cliente y servidor,define como el cliente podrá acceder a los datos.
Tiene un carácter fuertemente tipado,y está muy alejado de la filosofía REST(no seusarán endpoints,aparte del único necesario ni se usan VERBOS)

Los tipos de operaciones que admite son Query,Mutation y Subscription(se encarga de escuchar los cambios en tiempo real en el servidor).

Un schema mínimo debe tener uno de estos tipos de operación(también llamado tipos de raíz o tipos de operación raíz).Es decir debe tener un tipo de operación root o principal.

Todos estos tipos siempre son un objeto:
type Query {
  miQuery: <tipo de dato>
}
type Mutation{}
...

Todos los tipos y directivas deben tener nombres únicos y no pueden comenzar con dos guiones bajos.
Los campos van en camelCase(nombres de las variables)
Los tipos en PascalCase(el tipado)
Las enums su nombre en PascalCase y sus valores constantes asi RED,BLUE,GREEN

Un schema GraphQl debe ser definido en base a las necesidades del cliente,siempre e debería agregar los campos de las tablas si las pide el cliente.

				VIDEO 13 TIPOS DE ESCALARES

Los escalares son pares de clave valor con tipos primitivos que pueden almacenar un solo valor(nombre:String <- almacenará sólo un string)
Junto con los tipos de objeto y tipos de raíz son imprescindibles.
De manera predeterminada tendré para tipar el escalar a:
Int, Float,String,Boolean e ID(ojo un ID puede albergar un Int o un String)
Un tipo de escalar es la conjunción del nombreDeLaPropiedad junto al tipoDeLaData:

 nombre:String <- esto es un escalar
 edad: Int
 activo:Boolean <- el scalar es el par clave:valor,ojo
Fijate que los tipos van en mayúsculas como con el ODM mongoose.
Los scalares se definen en el schema.graphql,en el file con extensión graphql.
Por último puedo definir mis escalares personalizados

				VIDEO 14 TIPOS DE OBJETO

Puedo definir tantos tipos de objeto como quiera.Cada object type debe tener campos y modelará como se ve la API.Se usa la sintaxis type <Name> {}

Básicamente son un Object tipo Student,Course,etc.Si estoy en TS tendré que crear su contrapartida en Typescript seguramente:
type Profesor {
  name:String
  age:Int
  exp:String
 }

Fijate que son básicos,y que estan formados por escalares en su interior.

								ENUM TYPES

Son similares a un escalar,pero se usan cuando el valor debe venir de una lista de opciones ya predefinidas.
Para crear un enum se usa 'enum' en vez de 'type':
enum Cursos{
  COMPODOC
  NPM
  ANGULAR
}
Cuando alguien lo requiera puede darle un valor por defecto(enum=value):
type Alumno{ 
  name: String
  curso: Cursos=ANGULAR
}
Cada escalar podrá tener un valor por defecto también,seguramente.
NOTA:no queda claro si el escalar es sólo el tipo.Seguramente lo sea(nombre:String <- el escalar es String y no todo el par clave:valor).

					VIDEO 16 MODIFICADORES DE TIPO

Los modificadoers sirven para modificar el comportamiento al usar un escalar type,un object type o un enum type:
! indica obligatoriedad(y además no puede ser null)
[] indica que es una lista de valores y no un único valor:

type Profesor {
  name: String!
 } 
name aqui nunca puede ser null o undefined o dará error
[] si admite nulos en su interior:
type Profesor {
  name: String!
  cursos: [String]

Podría pasar [null,"Ana",null] como cursos y no dará error la validación.Fijate que el argumento es incluso opcional
IMPORTANTE:recuerda que GraphQl autogenera la validación y la documentación.
IMPORTANTE: dependiendo de donde ponga la ! en cursos podré modificar su comportamiento:

cursos: [String]! admite nulos en su interior pero no es un arg opcional,como lo era antes
cursos: [String!]! no admite nulos y es un argumento obligatorio
cursos: [String!] no admite nulos pero la lista de cursos puede ser null
Recuerda que sólo hay dos modificadores,! y []

						INTERFACES EN GRAPHQL

En GRAPHQL puedo definir interfaces(que son un simple object) con la sintaxis <interface Name {}.Ojo,que usan PascalCase.Ejemplo:

interface Perfil {
  nombre:String!
  email:String!
  edad:Int!
}
Fijate que sigo en el .graphql y que no es TS.
Ahora la puede heredar otro object.
type Alumno implements Perfil {
  nombre:String!
  email:String!
  edad:Int!
  cursos: Curso
} 
No me queda muy claro para que la hereda si hay que copiar todo lo de ella

						TIPOS DE RAÍZ

Son puntos de entrada predefinidos donde vamos a definir las operaciones que se van a dar en nuestra API.Es decir que dictarán qué se puede hacer en nuestra API.
Hay tres tipos,Queries,Mutations y Subscriptions.
El cliente se comunicará con el servidor a través de estos puntos de entrada.
Las Subscriptions trabajan con WebSockets

Minimo un Schema debe llevar el type Query con una definición.Ejemplo:

type Query{
  lista:[String]
}
type Mutation {
  insertar(elem:Int):[Int]
}
type Subscription {
  infoInsertada: [Int]
}

					VIDEO 19 ROOT TYPE - QUERY

El root type query es el punto de entrada para realizar consultas,es decir,para lectura de datos.Es similar a un GET en una API basada en REST.
Estará escrito en SDL(Schema Definition Language).Es la única forma en la que podemos obtener datos en GraphQl.
Su sintaxis es:

type Query { <- tipo de raíz(Query | Mutation | Subscription)
  elementos:[String] <- definiciones
  elemento(id:ID!):String <- tipo de dato que devuelve
}

				VIDEO 20 ROOT TYPE - MUTATION

Es el punto de entrada para realizar operaciones de modificación.Es equivalente en REST a POST,PUT,PATCH y DELETE
Es similar a una función.Es un root type,junto con Query y Mutation.
Es la única forma en la que podemos modificar datos.
Su sintaxis es:

type Mutation { <- tipo raíz
 insertarElemento(nombre):String
 borrarElemento(id:ID!):[String]  <- definiciones junto con el tipo a devolver
}
Puedo ver que es exactamente igual(type <RootType> { definiciones}

			VIDEO 21 ROOT TYPE - SUBSCRIPTION

Es el punto de entrada para obtener información en tiempo real.
Utiliza la conexión mediante WebSockets para obtener cambios
Notifica al que se suscribe y mantiene la interacción en tiempo real
Es uno de los tres tipos raíz.
En resumen es la típica Suscription a un posible cambio.
Su sintaxis es:

type Subscription { <- root type 
 nuevoElemento:String <- definición junto con el tipo de dato a retornar
}

Para realizar  una Subscription desde el playground:
subscription {
  nuevoElemento
} <- igual que una query o mutation

IMPORTANTE:cuando se haga la primera petición se quedará escuchando y se disparará de nuevo si hubiera un cambio en 'nuevoElemento'.En resumen,se disparará sólo.

				VIDEO 22 INPUT TYPES - TIPOS DE ENTRADA

Los tipos de entrada son elementos que nos permiten pasar valores a Queries/Mutations.
Se pueden pasar valores simples(escalares) u objetos más complejos.
Básicamente se comportan como los argumentos de cualquier operación/método.
Para declararlos se usa la sintaxis input <Name> { definitions }.Ejemplo:

input TagInput { <- input type
  label: String!
  description: String
}

type Tag {  <- object type
  id:ID!
  label: String!
  description: String
}

mutation {
  nuevoTag(tag: TagInput!):Tag
}
IMPORTATE:recuerda que los types en el schema.graphql van en PascalCase(TagInput,TAg,Alumno,Profesor,Curso,...)
Recuerda que para usarlo será un argumento en forma de objeto anidado:
mutation {
  nuevoTag(tag:{
  label:"xxx"
  description:"desc"
})

					VIDEO 23 AÑADIR COMENTARIOS 

GraphQl permite documentar añadiendo markdown dentro del schema,en forma de comentarios.Puedo embeber MD en esos comentarios,o no usar MD también,ojo y que sea un simple comentario.

Puedo usar un comentario monolinea: "**Description for the type**"
O bien usar uno multilínea: 
"""
**Description for the field**
It is mandatory to use a valid ***ID*** [API](http://example.com)
"""
NOTA:se comenta en el schema.graphql y lo veré en el playground.
Fijate que documentar la API es algo básico y fundamental

			SECCION 04 INTERFAZ GRAPHIQL - PLAYGROUND

La interfaz de Apollo Server PLAYGROUND se basa en GRAPHIQL,pero introduce mejoras como las pestañas,configuraciones del playground como los estilos o la opción de añadir valores en las cabeceras
También permite añadir una consulta a favoritos.
Tiene varias mejoras,como poder ver el schema y todos sus types,la rueda de ajustes

Usaremos esta API para la práctica introductoria mediante el Playground de Apollo Server Express:

https://breaking-bad-voting.herokuapp.com/

							QUERIES

Puedo ver que veré un error si no especifico que propiedades quiero como retorno:
{
  characters{
    id,name,actor
  }
}
También puedo apreciar el buen trabajo que hizo Anartz documentando la API y lo importante que es.

NOTA:puedo realizar queries en paralelo,es decir,realizar varias consultas simultáneamente(pero van en paralelo o secuencial?):

query {
  character(id:1){
    id,name,actor,total_episodes
  }
  characters{
    id,name,actor,total_episodes
  }
}

				MERGE DE LA MISMA INSTANCIA DE OBJETO

Cuando hacemos dos consultas que hacen referencia al mismo objecto pero con diferentes propiedades puedo hacer un merge.Por ejemplo si tengo una consulta que me devuelve el ID y nombre de Walter White y otra que me devuelve su descripción puedo hacer un merge y traerme una sola respuesta con el id,el nombre y la descripcion.
query {
  character(id:1){
    id
    name
  }
  character(id:1){
    actor,
    total_episodes
  }
}
Puedo ver que la respuesta es:
{
  "data": {
    "character": {
      "id": "1",
      "name": "Walter White",
      "actor": "Bryan Cranston",
      "total_episodes": 62
    }
  }
}
El merge lo hace GraphQl por defecto,pero debo saber que lo va a hacer.

				VIDEO 31 ALIAS

Los Alias son los nombres que debemos de añadir con el objetivo de evitar conflictos entre instancias diferentes del mismo objecto.Esto dará error:
query {
  character(id: 1) {
    id
    name
  }
  character(id: 2) {
    actor
    total_episodes
  }
}
 Para añadir un alias a una consulta simplemente se usa <alias>:consulta.Ejemplo:query {
  walter:character(id: 1) {
    id
    name
  }
  jesse:character(id: 2) {
    actor
    total_episodes
  }
}
Y la data puedo ver que también usará ese alias.
{
  "data": {
    "walter": {
      "id": "1",
      "name": "Walter White"
    },
    "jesse": {
      "actor": "Aaron Paul",
      "total_episodes": 62
    }
  }
}
IMPORTANTE: el error.message puedo ver que incluso lo sugiere y que ya me está diciendo que no puedo pedir dos objetos diferentes en la misma query(supongo que entra en conflicto con el auto-merge):
"Fields |character conflict because they have different arguments.Use different aliases on the fields to fetch both if this was intentional"
La solución es bien sencilla y es usar alias.

						VIDEO 32 FRAGMENTS

Los fragments son los elementos que nos permiten simplificar las consultas definiendo en un bloque una colección de datos a recuperar sin tener que indicarlos individualmente lo que resulta muy útil para no repetir el mismo grupo de datos una y otra vez si se utiliza en más de una consulta,que es justo lo que estamos haciendo.Ejemplo incorrecto sin usar fragments:
query {
  walter:character(id: 1) {
    id
    name
    actor
    total_episodes
  }
  jesse:character(id: 2) {
    id
    name
    actor
    total_episodes
  }
  hank:character(id:4){
    id
    name
    actor
    total_episodes
  }
}

Para definir un fragment se usa la siguiente sintaxis:
fragment <camelCaseName> on <type> { properties } .Ejemplo:

fragment personajesFragment on Character {
	id name actor
}
Ojo,que Character no es la query,sino un type del Schema.Al final quedaría asi:

query {
  walter: character(id: 1) {
    ...personajesFragment
  }
  jesse: character(id: 2) {
    ...personajesFragment
  }
  hank: character(id: 4) {
    ...personajesFragment
  }
}

fragment personajesFragment on Character {
  id
  name
  actor
  total_episodes
}

Puedo ver que es muy útil.Entender los alias y los fragments es básico.

					VIDEO 33 QUERY VARIABLES

La forma de pasar una variable a una consulta es usando Query Variables.Es similar a la variable en linea (walter:character(id:"1")).Se considera que queda más limpia la Variable de Consulta o Query Variable

Para usar/definir una variable de consulta se usa la zona Query Variables.En ella escribo lo siguiente:
{
  "walter":"1",<- ojo que es JSON y lleva comas
  "objeto":{} <- incluso puedo usar objetos
}

Al final usamos las tres de antes:
{
  "walter":"1",
  "jesse":"2",
  "hank":"4"
}
Puedo ver que ya el IDE me avisa que no las estoy usando en el código.Para usarlas en la query tengo que darla un nombre+(args),es decir:
query <anyName>($walter:ID!,$jesse:ID!,$hank:ID!) <- ojo que tengo que decirlas el tipo también.

Ahora quedará la consulta asi:

query listaPersonajes($walter: ID!, $jesse: ID!, $hank: ID!) {
  walter: character(id: $walter) {
    ...personajesFragment
  }
  jesse: character(id: $jesse) {
    ...personajesFragment
  }
  hank: character(id: $hank) {
    ...personajesFragment
  }
}

Recuerda que las queryVariables usan sintaxis JSON.Son muy útiles con argumentos que sean un objeto,para este ID una variable en linea es suficiente.

						VIDEO 34 MUTATIONS

Las mutaciones son operaciones enviadas al servidor para crear,actualizar o eliminar datos.En este momento solo tenemos una:

mutation {
  votar:addVote(character:1){
    id,character,createdAt
  }
}
Fijate que la respuesta siempre va a ser data.alias|name.response:
{
  "data": {
    "votar": {
      "id": "10488",
      "character": "1",
      "createdAt": "2022-01-23 14:09:50"
    }
  }
}
Como le dí un alias es data.votar pero sino hubiera sido data.addVote,es decir que hasta el tercer nivel no tengo la respuesta.Es importante esto?

					VIDEO 35 DIRECTIVAS SKIP E INCLUDE

Las directivas skip e include sirven para excluir o incluir campos en base a condiciones.Ejemplo:
Declaro una queryVariable
QueryVariable:
{
  "mostrarActor": true
}
Ahora muestro o incluyo un campo en base a esa condición:
query getCharacters($mostrarActor:Boolean!){
  characters{
   id
   name
   actor @include(if: $mostrarActor)
} }
Recuerda que al suministrar la QueryVariable debo indicar el tipo(Boolean!) y siempre son obligatorios:

query getCharacters($mostrarActor:Boolean!,$esconderActor:Boolean!) {
  caracteres:characters{
    id
    name @skip(if: $esconderActor)
    actor @include(if: $mostrarActor)
  }
}

							SUBSCRIPTIONS

Las subscriptions nos ayudan a suscribirnos a un determinado evento.En este caso podemos suscribirnos a cualquier cambio en los votos:

subscription {
  newVote{
    id
    name
    votes
  }
}
Si le doy al play veré que se queda 'listening' y si despues añado un voto se disparará la subscription(que simplemente imprime los campos que le diga).Al parecer hay un bug en la URL que nos proporciona Anartz y hay que esperar a un proyecto propio
Recuerda que la directiva include o skip siempre lleva la misma estructura:
field @include(if: <valor_boolean>)

			SECCION 6 INTRODUCCION AL DESARROLLO DE UNA API GRAPHQL

En esta sección vamos simplemente a montar el servidor y un schema con un rootQeuery con un simple hola mundo.Lo importante es ver como montamos un servidor GraphQl.
Lo primero será crear un directorio para el proyecto,iniciar un proyecto npm alli y configurar el tsconfig(npx tsc --init)

Recuerda que el entry point va a cambiar a build/server.js ya que voy a compilar de TS a build/server.js.Y para hacer esto inicio el TS con npx tsc --init.

LE cambiaré el rootDir a 'src',el outDir a 'build',las lib a [dom,es6],el modulo a commonjs,removeComments a true y el target a es6.Fijate que se puede pasar todo esto en un comando o simplemente ir al file:
oscar@acer-linux:/media/oscar/CRUCIALX6/GraphQL/holamundo$ npx tsc --init --rootDir src --outDir build --lib dom,es6 --module commonjs --removeComments --target es6

Created a new tsconfig.json with:                                                    
                                                                                  TS 
  target: es6
  module: commonjs
  lib: dom,es6
  outDir: build
  rootDir: src
  strict: true
  esModuleInterop: true
  skipLibCheck: true
  forceConsistentCasingInFileNames: true

RemoveComments remueve todos los comentarios al compilar.

Bien,tras los pasos de crear el package.json y el ts.config.json y de instalar las dependencias habrá que configurar los scripts:

En cuanto al comando start simplemente arranco el js del compilado:
    "start": "node build/server.js",
    "build": "tsc -p . && ncp src/schema build/schemaa",

Fijate que "tsc -p ." indica a Typescript que compile todo lo del directorio especificado en rootDir(en nuestro caso todo lo de dentro de 'src')Sin embargo Typescript no va a copiar el file con extensión graphql asi que hacemos uso de la libreria ncp para copiar directorios

   "start": "node build/server.js",
   "build": "npx tsc -p . && ncp src/schema build/schema",
   "dev": "nodemon src/server.ts --exec ts-node src/server.ts -e ts,graphql,json"En cuanto al de desarrollo uso nodemon file --exec ts-node file -e extensiones.

			DECLARACIÓN DE LOS TYPES,RESOLVERS Y SCHEMA

Realmente es muy sencillo,los types van a necesitar template strings mientras no estén en un archivo con extensión graphql.Los resolvers son un objeto con las soluciones al contrato:

const typesDefinition = `
  type Query {
    hello: String!
    helloWithName(name: String!): String!
  }
`;

const resolvers = {
  Query: {
    hello: () => 'Hello world!',
    helloWithName: (_: any, { name }: any) => `Hello ${name}!`,
  },
} 

const schema: GraphQLSchema = makeExecutableSchema({
  typeDefs: [typesDefinition],
  resolvers,
});

Fijate que de momento vamos a usar GRAPHIQL(la que desarrolló Facebook):

import { graphqlHTTP } from 'express-graphql';

app.use('/graphql',graphqlHTTP({
  schema,
  graphiql: true,
}) );
Como puedo observar no puede ser más fácil levantar un servidor GraphQl(recuerda que es un único endpoint).Claro que tengo todo en el mismo archivo.

					VIDEO 48 REFACTORIZACIÓN DEL CÓDIGO

Es obvio que no puedo declarar todo en ese mismo archivo y que tengo que refactorizar.Para todo esto creo dos folders, schema y resolvers que cuelguen de src.

IMPORTANTE:recuerda que necesito la libreria graphql-import-node para poder leer el archivo schema.graphql o cualquiera con extensión .graphql.

En el archivo src/schema/schema.graphql pego lo que tenia entre templates:

Aparte creo un index.ts a su altura(src/schema/index.ts) donde haré toda la mezcla y exportaré el GraphQLSchema:

En ese index.ts me traigo todo,creo el schema y lo exporto:

import { GraphQLSchema } from "graphql";
import { makeExecutableSchema } from "graphql-tools";
import 'graphql-import-node';
import typesDefinition from './schema.graphql';

export const schema: GraphQLSchema = makeExecutableSchema({
  typeDefs: [typesDefinition],
  resolvers,
});

En cuanto a la carpeta resolvers creo los archivos queries.ts, mutations.ts y subscriptions.ts segun los necesite(el nombre puede variar un poco).

En cada uno de ellos exporto sus operaciones:
const queries = {
  Query: {
    hello: () => 'Hello world!',
    helloWithName: (_: any, { name }: any) => `Hello ${name}!`,
  },
} 

export default queries;

También me tendré que crear un archivo para mergear estos files y devolverlos como un único objecto.Pan comido:
import queries from "./query";

export const resolvers = {
  ...queries
}

Ya solo faltaría arreglar las exports e imports de la refactorización.

app.use('/graphql',graphqlHTTP({
  schema,
  graphiql: true,
}));

				VIDEO 49 CONFIGURAR APOLLO-SERVER-EXPRESS

Dado que la interfaz web de graphiQL es inferior al playground de apollo-server-expres realmente vamos a usar Apollo en vez de express-graphql:
npm uninstall express-graphql
npm install apollo-server-express@2.25.3

* Fijate que me sugieren usar @graphql-tools/schema.Investigar.Aprender como usar la version 3 de apollo-server-express.

Ya no podré usar esto,pues viene de express-graphql:
app.use('/graphql',graphqlHTTP({
  schema,
  graphiql: true,
}) );

En su lugar hay que crear un ApolloServer:
import { ApolloServer } from 'apollo-server-express';

const server = new ApolloServer({
  schema,
  introspection: true,
  playground: true,
});

server.applyMiddleware({ app });

IMPORTANTE:el server que creo con ApolloServer necesita un servidor HTTP,lo puedo crear con el módulo core http y el método createServer:
import { createServer } from 'http';

const httpServer = createServer(app);

Y ahora levanto ese en vez de el de express
httpServer.listen(3000, () => {
  console.clear();
  console.log('Servidor corriendo en http://localhost:3000/graphql');
});

Es decir que necesito un servidor express,un servidor Apollo y uno HTTP.
Ya puedo ejecutar la app e ir a /graphql y ver el playground.Parece que por defecto va alli,no hay que usar app.use(path) y crear una URL.Genial.

				SECCION 07 NUEVO PROYECTO -ACADEMIA ONLINE

No vamos a usar una DB,usaremos un par de JSON como fake data.En este proyecto veremos las primeras interacciones con el playground de ApolloServer.
Mañana darle caña
