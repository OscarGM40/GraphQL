				INTRODUCCIÓN CON NODE-EXPRESS Y TYPESCRIPT A GRAPHQL

Source: https://www.youtube.com/watch?v=NacgrA7l1ZA

NOTA.anteriormente usé express-graphql con Fazt.Ahora veré graphql con apollo.

				CONFIGURAR TYPESCRIPT EN EL PROYECTO

Creo un proyecto Node y le instalo las siguiente dependencias:
npm install typescript.

Ahora creo el tsconfig con este módulo,dado que está en el proyecto únicamente,uso npx para ello:
npx tsc --init

Adecuo la configuración de typescript a lo que Anartz quiere,removiendo los Comments,permitiendo importar JSON y cambiando el rootDir y el outDir.Seguir video.
Fijate que en cuanto necesite importar archivos json tendré que activarlo,ya que viene desactivado por defecto en TS.
    "lib": ["DOM","ES2016"] <- librerías a usar.También queremos la DOM

						INSTALAR DEPENDENCIAS DEL PROYECTO

Voy a instalar express,graphql,ncp para copiar directorios,graphql-import-node para trabajar con archivos graphql ....

npm i -S express graphql ncp graphql-import-node compression cors graphql-tools graphql-playground-middleware-express apollo-server-express@^2

Y para desarrollo instalo las librerias para los definition types para:
npm i -D @types/compression @types/express @types/cors @types/node @types/graphql nodemon ts-node
Aparte de nodemon y ts-node para --save-dev.

				CONFIGURAR SCRIPTS EN EL PACKAGE.JSON

Vamos a definir tres scripts.Para hacer el build necesitaremos de la libreria ncp que copia directorios,tal como hemos acordado:
 "build": "npx tsc -p . && ncp src/schema build/schema",

Para dev vamos a usar nodemon y ts-node en conjunción,aunque también podría haber usado ts-node-dev,esto no es importante mientras tenga reload:

"dev":"nodemon src/app.ts --exec ts-node src/app.ts -e ts,graphql,json",
Fijate que con -e le paso las extensiones.Interesante

Por último start será el comando que levante la app una vez buildeada:
"start": "node build/app.js" 
Genial.Todo sencillo hasta ahora.

					CONFIGURAR SERVIDOR EXPRESS

Fijate que él crea el servidor con createServer del modulo core http y que declara una ruta GET con app.use.Investigar sobre el módulo compression:

import express from 'express';
import cors from 'cors';
import compression from 'compression';
import { createServer } from 'http';

const app = express();

/* Middlewares */
app.use(cors());
app.use(express.json());
// Comprimo el proyecto con compression
app.use(compression());

app.use('/', (_, res) => {
  res.send('Bienvenidos/as al curso de GraphQL');
});

const httpServer = createServer(app);

httpServer.listen({
  port: process.env.PORT || 3003,
}, () => {
  console.clear();
  console.log('Servidor corriendo en el puerto 3003');
});

MINUTO 32
